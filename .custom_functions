function r2lport {
  emulate -L ksh # need this to work in zsh
  LOCALPORT=6006
  REMOTEPORT=6006
  SERVER=orleans
  OPTIND=1
  while getopts 'l:r:s:' flag; do
    case "${flag}" in
      l) LOCALPORT="${OPTARG}" ;;
      r) REMOTEPORT="${OPTARG}" ;;
      s) SERVER="${OPTARG}" ;;
      ?)
        echo "script usage: r2lport [-l localport] [-r remoteport] [-s server]" >&2 && return;;
    esac
  done
  OPTIND=1

  echo "Publishing $SERVER's remote port $REMOTEPORT to local port $LOCALPORT"

  ssh -t -L "$LOCALPORT:localhost:$REMOTEPORT" $SERVER
}

# This function is used to enable or disable tabnine extension in jupyter notebook
# https://github.com/codota/jupyter-tabnine
function jupyter-tabnine {
  EORD="$1"
  if [[ $EORD == 'enable' ]] 
  then
    echo "Jupyter's tabnine extension enabled"
  elif [[ $EORD == 'disable' ]]
  then
    echo "Jupyter's tabnine extension disabled"
  else
    echo "script usage: jupyter-tabnine [enable] [disable]" >&2 && return
  fi
  jupyter nbextension $EORD --py jupyter_tabnine --user
  jupyter serverextension $EORD --py jupyter_tabnine --user
}

# This function will update the requirements.txt file
# for the current python venv
function venv-update-requirements {
  # Get the current python env
  PYTHONPATH=$(which python)

  # With this if statemente, we check if we are in a venv
  if [[ -f $(dirname $PYTHONPATH)/activate ]]; then
      VENVFOLDER="$(dirname "$PYTHONPATH")"
      VENVFOLDER="$(dirname "$VENVFOLDER")"
      FILE=$VENVFOLDER/requirements.txt
      echo "Generating $FILE\nfor the venv $VENVFOLDER"
  else;
      echo "The current python interpreter doesn't seem to be a venv.\nExiting."
      return
  fi

  if [[ -f $FILE ]]; then
      echo 'The file already exists, do you want to'
      rm -i $FILE
  fi

  # Generating the actual file
  python -m pip freeze > $FILE

  echo "requirements.txt have been generated."
}
